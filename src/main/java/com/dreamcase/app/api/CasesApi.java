/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dreamcase.app.api;

import com.dreamcase.app.dto.CaseRequestDto;
import com.dreamcase.app.dto.CaseResponseDto;
import com.dreamcase.app.dto.ErrorDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-14T22:13:34.404407400+01:00[Africa/Casablanca]")
@Validated
@Tag(name = "cases", description = "the cases API")
public interface CasesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/cases : create case
     *
     * @param caseRequestDto  (optional)
     * @return Successful operation (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createCase",
        summary = "create case",
        tags = { "cases" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CaseResponseDto.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/cases",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<CaseResponseDto>> _createCase(
        @Parameter(name = "CaseRequestDto", description = "") @Valid @RequestBody(required = false) CaseRequestDto caseRequestDto
    ) {
        return createCase(caseRequestDto);
    }

    // Override this method
    default  ResponseEntity<List<CaseResponseDto>> createCase(CaseRequestDto caseRequestDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"updatedAt\" : \"\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"updatedAt\" : \"\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/cases/{caseID} : Delete case by id
     *
     * @param caseID case id (required)
     * @return Successful operation (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteCase",
        summary = "Delete case by id",
        tags = { "cases" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/cases/{caseID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> _deleteCase(
        @Parameter(name = "caseID", description = "case id", required = true, in = ParameterIn.PATH) @PathVariable("caseID") Long caseID
    ) {
        return deleteCase(caseID);
    }

    // Override this method
    default  ResponseEntity<Void> deleteCase(Long caseID) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/cases/{caseID} : Retrieve case by id
     *
     * @param caseID case id (required)
     * @return Successful operation (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "readCase",
        summary = "Retrieve case by id",
        tags = { "cases" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CaseResponseDto.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/cases/{caseID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CaseResponseDto>> _readCase(
        @Parameter(name = "caseID", description = "case id", required = true, in = ParameterIn.PATH) @PathVariable("caseID") Long caseID
    ) {
        return readCase(caseID);
    }

    // Override this method
    default  ResponseEntity<List<CaseResponseDto>> readCase(Long caseID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"updatedAt\" : \"\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"updatedAt\" : \"\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/cases/{caseID} : update case
     *
     * @param caseID case id (required)
     * @return Successful operation (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateCase",
        summary = "update case",
        tags = { "cases" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CaseResponseDto.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/cases/{caseID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CaseResponseDto>> _updateCase(
        @Parameter(name = "caseID", description = "case id", required = true, in = ParameterIn.PATH) @PathVariable("caseID") Long caseID
    ) {
        return updateCase(caseID);
    }

    // Override this method
    default  ResponseEntity<List<CaseResponseDto>> updateCase(Long caseID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"updatedAt\" : \"\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"updatedAt\" : \"\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
